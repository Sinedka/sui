---
# Основные включенные проверки
Checks: >
  clang-analyzer-*,                 # Статический анализатор: утечки памяти, nullptr, двойное освобождение
  clang-analyzer-security.*,        # Потенциальные уязвимости: буферы, строки, опасные функции
  cppcoreguidelines-*,              # Рекомендации по современному C++ (владение памятью, инициализация, массивы)
  performance-*,                    # Лишние копирования, неэффективные конструкции
  bugprone-*,                        # Потенциальные логические ошибки
  hicpp-*,                           # Стандарты HICPP
  modernize-*,                       # Современные конструкции C++
  readability-*,                     # Стиль, читаемость
  readability-identifier-naming      # Проверка имен переменных, функций, классов и констант

WarningsAsErrors: '*'               # Все предупреждения превращаем в ошибки
HeaderFilterRegex: '.*'             # Проверять все заголовочные файлы
FormatStyle: file                   # Использовать .clang-format для форматирования

CheckOptions:

  # --- Управление памятью и ресурсы ---
  - key: cppcoreguidelines-owning-memory.IgnoreSmartPointers
    value: 'false'                  # Проверять владение памятью, включая smart pointers
  - key: cppcoreguidelines-no-malloc.WarnOnMalloc
    value: 'true'                   # Предупреждать о malloc/free
  - key: clang-analyzer-memory-leak.DetectLeaks
    value: 'true'                   # Полное отслеживание утечек памяти
  - key: clang-analyzer-cplusplus.NewDeleteLeaks
    value: 'true'                   # Проверка утечек при new/delete
  - key: clang-analyzer-cplusplus.SmartPtr
    value: 'true'                   # Проверка корректного использования unique_ptr/shared_ptr
  - key: bugprone-use-after-move.WarnOnPointer
    value: 'true'                   # Ловим использование объектов после std::move

  # --- Проверки синтаксиса и безопасности ---
  - key: cppcoreguidelines-pro-type-member-init.WarnOnAllMembers
    value: 'true'                   # Все члены классов должны быть инициализированы
  - key: cppcoreguidelines-pro-bounds-array-to-pointer-decay.WarnOnAll
    value: 'true'                   # Проверка выхода за границы массивов
  - key: clang-analyzer-core.NullDereference
    value: 'true'                   # Проверка обращения к nullptr
  - key: hicpp-no-array-decay.Strict
    value: 'true'                   # Предупреждение о небезопасном преобразовании массивов в указатели
  - key: bugprone-reserved-identifier.Strict
    value: 'true'                   # Предупреждение о запрещённых идентификаторах
  - key: cppcoreguidelines-pro-type-vararg.WarnOnVarArgs
    value: 'true'                   # Предупреждение о varargs (...)
  - key: cppcoreguidelines-pro-bounds-pointer-arithmetic.WarnOnAll
    value: 'true'                   # Контроль опасной арифметики указателей

  # --- Производительность ---
  - key: performance-unnecessary-value-param.AllowedTypes
    value: ''                       # Ловим лишние копии объектов при передаче по значению
  - key: performance-for-range-copy.WarnOnAllRanges
    value: 'true'                   # Предупреждение о копировании объектов в range-based for
  - key: performance-move-const-arg.WarnOnConst
    value: 'true'                   # Рекомендует std::move для аргументов, больше не используемых
  - key: performance-no-automatic-move.WarnOnAll
    value: 'true'                   # Проверка неявного перемещения объектов

  # --- Современный C++ ---
  - key: modernize-avoid-c-arrays.WarnOnAll
    value: 'true'                   # Замена C-массивов на std::array или std::vector
  - key: modernize-use-emplace.WarnOnAll
    value: 'true'                   # Использовать emplace вместо push_back/insert
  - key: modernize-pass-by-value.WarnOnAll
    value: 'true'                   # Передача по значению с последующим std::move
  - key: modernize-use-nullptr.NullMacros
    value: 'NULL'                    # Рекомендует nullptr вместо NULL
  - key: modernize-use-auto.MinTypeNameLength
    value: '0'                       # Рекомендует auto для всех типов
  - key: modernize-use-trailing-return-type.MinTypeNameLength
    value: '0'                       # Использовать trailing return type

  # --- Читаемость и стиль ---
  - key: readability-braces-around-statements.ShortStatementLines
    value: '1'                       # Добавлять фигурные скобки вокруг однострочных блоков
  - key: readability-magic-numbers.IgnoredValues
    value: '0,1'                     # Игнорируем 0 и 1, остальное — предупреждение
  - key: readability-else-after-return.WarnOnAll
    value: 'true'                     # Упрощает ветвления после return
  - key: readability-identifier-naming.VariableCase
    value: 'camelCase'               # Переменные — camelCase
  - key: readability-identifier-naming.FunctionCase
    value: 'camelCase'               # Функции — camelCase
  - key: readability-identifier-naming.ClassCase
    value: 'PascalCase'              # Классы — PascalCase
  - key: readability-identifier-naming.ConstantCase
    value: 'UPPER_CASE'              # Константы — UPPER_CASE
  - key: readability-identifier-naming.EnumCase
    value: 'PascalCase'              # Элементы enum — PascalCase
  - key: readability-identifier-naming.PrivateMemberPrefix
    value: 'm_'                      # Префикс для приватных членов класса

  # --- Потенциальные баги ---
  - key: bugprone-argument-comment.WarnOnAll
    value: 'true'                     # Проверка комментариев при передаче аргументов
  - key: bugprone-copy-constructor-init.WarnOnAll
    value: 'true'                     # Некорректная инициализация в конструкторах копирования
  - key: bugprone-easily-swappable-parameters.WarnOnAll
    value: 'true'                     # Предупреждение о функциях с параметрами одного типа

